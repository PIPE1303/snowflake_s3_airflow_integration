COPY INTO {{params.stage}}/{{params.path}}/{{params.filename}}
FROM (
WITH DATES AS (
    SELECT T.TIME_ID
        ,T.ACTION_TIMESTAMP
        ,Y.ACTION_YEAR AS YEAR
        ,M.ACTION_MONTH AS MONTH
    FROM {{params.db}}.{{params.schema_origin}}.D_TIME T
    LEFT JOIN {{params.db}}.{{params.schema_origin}}.D_YEAR Y
        ON T.YEAR_ID = Y.YEAR_ID
    LEFT JOIN {{params.db}}.{{params.schema_origin}}.D_MONTH M
        ON T.MONTH_ID = M.MONTH_ID
)
,PIX_ACCOUNTS AS (
    SELECT PIX.ACCOUNT_ID
        ,D.ACTION_TIMESTAMP AS TRANSACTION_COMPLETED_AT
        ,D.YEAR
        ,D.MONTH
        ,CASE WHEN UPPER(PIX.IN_OR_OUT) = 'PIX_IN' THEN PIX.PIX_AMOUNT ELSE 0 END AS TRANSFER_IN
        ,CASE WHEN UPPER(PIX.IN_OR_OUT) = 'PIX_OUT' THEN PIX.PIX_AMOUNT ELSE 0 END AS TRANSFER_OUT
    FROM {{params.db}}.{{params.schema_origin}}.PIX_MOVEMENTS PIX
    LEFT JOIN DATES D
        ON PIX.PIX_COMPLETED_AT = D.TIME_ID
    WHERE UPPER(PIX.STATUS) = 'COMPLETED'
)
,ALL_TRX AS (
    SELECT INS.ACCOUNT_ID
        ,D.MONTH
        ,SUM(INS.AMOUNT) AS SUM_TRANSFER_IN
        ,0 AS SUM_TRANSFER_OUT
        ,'IN' AS FLAG
    FROM {{params.db}}.{{params.schema_origin}}.TRANSFER_INS INS
    LEFT JOIN DATES D
        ON INS.TRANSACTION_COMPLETED_AT = D.TIME_ID
    WHERE UPPER(INS.STATUS) = 'COMPLETED'
    GROUP BY 1,2
    
    UNION ALL
    
    SELECT OUT.ACCOUNT_ID
        ,D.MONTH
        ,0 AS SUM_TRANSFER_IN
        ,SUM(OUT.AMOUNT) AS SUM_TRANSFER_OUT
        ,'OUT' AS FLAG
    FROM {{params.db}}.{{params.schema_origin}}.TRANSFER_OUTS OUT
    LEFT JOIN DATES D
        ON OUT.TRANSACTION_COMPLETED_AT = D.TIME_ID
    WHERE UPPER(OUT.STATUS) = 'COMPLETED'
    GROUP BY 1,2
    
    UNION ALL
    
    SELECT ACCOUNT_ID
        ,MONTH
        ,SUM(TRANSFER_IN) AS SUM_TRANSFER_IN
        ,SUM(TRANSFER_OUT) AS SUM_TRANSFER_OUT
        ,'PIX' AS FLAG
    FROM PIX_ACCOUNTS
    GROUP BY 1,2
)
SELECT ACC.ACCOUNT_NUMBER
    ,TRX.MONTH::INTEGER AS MONTH
    ,SUM(SUM_TRANSFER_IN) AS FINAL_TRANSFER_IN
    ,SUM(SUM_TRANSFER_OUT) AS FINAL_TRANSFER_OUT
    ,FINAL_TRANSFER_IN - FINAL_TRANSFER_OUT AS NET_TRANSACTION_AMOUNT
    ,SUM(FINAL_TRANSFER_IN - FINAL_TRANSFER_OUT)
        OVER (PARTITION BY ACCOUNT_NUMBER
               ORDER BY MONTH::INTEGER 
               ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS ACCOUNT_MONTHLY_BALANCE
FROM {{params.db}}.{{params.schema_origin}}.ACCOUNTS ACC
LEFT JOIN ALL_TRX TRX
    ON TRX.ACCOUNT_ID = ACC.ACCOUNT_ID
GROUP BY 1,2
)
FILE_FORMAT= (TYPE = CSV, COMPRESSION = NONE)
HEADER = TRUE
OVERWRITE = TRUE
SINGLE = TRUE
;